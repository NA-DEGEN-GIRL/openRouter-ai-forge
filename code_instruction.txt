AI 워크플로우 오케스트레이터 - 시스템 요구사항 명세서
1. 시스템 개요와 목적
본 시스템은 OpenRouter 플랫폼의 다양한 AI(LLM) 모델 API를 활용하여, 사용자가 정의한 **작업 워크플로(Workflow)**를 다중 AI에 동시 분산 실행‧병합하면서 자동으로 처리하는 CLI 기반 자동화 프레임워크입니다.

웹 실시간 정보 활용, AI 간 협업/비교, 단계별 분석-구조화-결과물 생성을 순환하는 것이 특징입니다.

2. 기능 명세 및 요구사항 (구현 관점)
[1] 환경/설치 준비
파이썬 기반.

OpenRouter API 활용.

.env 파일에 OPENROUTER_API_KEY가 반드시 들어 있어야 함.

파이썬 requirements(.in/.txt)로 의존성 관리.

CLI 단독 실행 가능해야 함.

[2] 입력 파일 및 구성
ai_models.txt: 사용할 모델들의 OpenRouter ID를 한 줄씩 작성.

프롬프트 파일 (예: research.md, writing.md 등): 작업의 이름과 각 단계를 섹션별로 기술.

## project name ##: 해당 작업의 고유 이름. 첫 섹션에 필수.

## prompt1 ##, ## prompt2 ##, … : 단계별 프롬프트. 몇 개든 자유롭게 추가/수정 가능.

프롬프트별로 reasoning 및 교차AI정보(협업) 옵션 제공 가능(태그 활용: # reasoning, # other_ai_info)

시스템 프롬프트, 역할, 출력 형식 등 모든 지시사항은 이 파일 내에서 선언적으로 정의함.

[3] AI 실행 및 워크플로
각 prompt 단계마다, ai_models.txt에 기재된 모든 모델에 대해 병렬/동시 API 요청.

각 AI의 결과는 작업명 기반 하위폴더(projects/...) 내에, ai별 response 파일(p1_MODELNAME.md, final_MODELNAME.md 등)에 저장.

협업 단계(other_ai_info)에서는, 각 AI별로 다른 모든 AI의 답변을 아래 형식으로 전달하여 프롬프트를 동적으로 생성.

정보 전달 형식:
--- RESPONSE FROM [AI 모델 별명] ---
(해당 AI의 전체 답변 내용)

“협업/교차참조” 기능은 실행 시 플래그(option)로 온/오프 가능.

[4] 실패/예외/재시도
API 요청 실패 시: 1~2회 일정 시간 간격으로 재시도.

특정 AI가 계속 실패할 경우, 해당 모델은 워크플로에서 제외하고 중단 없이 계속 진행.

[5] 결과물 및 파일구조
각 단계별 결과: projects/작업명/p1_MODEL.md, p2_MODEL.md …, 최종: final_MODEL.md

실시간 진행상황: projects/작업명/live_logs/MODEL.log에 reasoning/답변 로그 기록.

작업명은 파일/폴더명으로 사용 가능하게 자동 변환 처리.

[6] 실시간 로깅/진행상황 표시
CLI에서 워크플로 주요 진행 상태를 메시지로 안내.

view_log.py를 통해 특정 모델의 작업 과정을 실시간으로 모니터링 가능.

OpenRouter의 stream 기능을 활용하여 답변 생성 과정을 실시간으로 로그 파일에 기록.

[7] 프로젝트 확장성/유연성
모델 수, 프롬프트 단계 수 제한 없이 자유롭게 확장 가능.

JSON 유효성 검증: JSON 생성 단계에서, 생성된 결과물이 표준 JSON 형식을 따르는지 자체적으로 검증해야 함. 유효하지 않을 경우, 스스로 수정하여 다시 출력해야 함.

3. 기술/구현 포인트
파일 기반 상태관리: (ai_models.txt, 프롬프트 파일, .env, projects/… 등)

멀티스레딩으로 AI 요청 동시 처리.

시스템 프롬프트는 각 프롬프트 파일 내에서 정의하여, 작업별로 AI의 역할을 부여할 수 있어야 함. (예: "너는 크립토 분석가다", "너는 소설가다" 등)

에러 발생 시, 로그 파일에 상세 이력 기록.

4. 사용 시나리오(요약)
사용자는 .env, ai_models.txt, 그리고 원하는 작업을 정의한 프롬프트 파일을 준비.

python research_bot.py --prompt [프롬프트 파일명] 명령으로 실행.

지정된 워크플로에 따라 모든 결과물이 자동으로 생성됨.

실시간 로그는 view_log.py로 모니터링 가능.

5. 확장 가이드
리서치 봇: research.md 프롬프트 사용.

소설 공동 집필 봇: 각기 다른 역할을 부여한 novel_writing.md 프롬프트 사용 가능.

코드 리뷰 봇: 코드 생성, 보안 검토, 리팩토링 단계를 정의한 code_review.md 프롬프트 사용 가능.

이처럼 프롬프트 파일만 새로 정의하면, 어떤 종류의 다중 AI 협업 워크플로든 만들 수 있음.